--ASSIGNMENT 1

--DEPARTMENT TABLE

CREATE TABLE DEPARTMENT(
DEPARTMENTID INT PRIMARY KEY,
DEPARTMENTNAME VARCHAR(50) NOT NULL UNIQUE);

--STUDENTS TABLE

CREATE TABLE STUDENTS(
STUDENTID INT PRIMARY KEY ,
NAME VARCHAR(50),
AGE INT CHECK(AGE>=17),
DEPARTMENTID INT FOREIGN KEY REFERENCES DEPARTMENT(DEPARTMENTID));

-- COURSE TABLE

CREATE TABLE COURSE(
COURSEID INT PRIMARY KEY,
COURSENAME VARCHAR(50) NOT NULL,
DEPARTMENTID INT FOREIGN KEY REFERENCES DEPARTMENT(DEPARTMENTID));

INSERT INTO DEPARTMENT(DEPARTMENTID,DEPARTMENTNAME)
VALUES(1,'COMPUTER SCIENCE'),
(2,'MECHANICAL'),
(3,'ELECTRICAL'),
(4,'CIVIL'),
(5,'ELECTRONICS');

INSERT INTO DEPARTMENT(DEPARTMENTID,DEPARTMENTNAME)
VALUES(6,'INFORMATION SCIENCE');

SELECT*FROM DEPARTMENT;

INSERT INTO STUDENTS(STUDENTID,NAME,AGE,DEPARTMENTID)
SELECT 163,'AVI',21,1

INSERT INTO STUDENTS(STUDENTID,NAME,AGE,DEPARTMENTID)
SELECT 150,'RAJ',17,2

INSERT INTO STUDENTS(STUDENTID,NAME,AGE,DEPARTMENTID)
SELECT 100,'SONU',24,3

INSERT INTO STUDENTS(STUDENTID,NAME,AGE,DEPARTMENTID)
SELECT 94,'BHARGAV',19,4

INSERT INTO STUDENTS(STUDENTID,NAME,AGE,DEPARTMENTID)
SELECT 215,'VARSHA',20,5

SELECT*FROM STUDENTS;

INSERT INTO COURSE(COURSEID,COURSENAME,DEPARTMENTID)
VALUES(21,'DBMS',1),
(13,'THERMODYNAMICS',2),
(52,'CIRCUITS',3),
(5,'STRUCTURES',4),
(18,'AI',5);

INSERT INTO COURSE(COURSEID,COURSENAME,DEPARTMENTID)
VALUES(19,'AI&ML',6);

SELECT*FROM COURSE

--Display all students whose age is greater than 20.

SELECT*FROM STUDENTS WHERE AGE>20;

--Display all courses of the "Computer Science" department.

SELECT COURSENAME FROM COURSE 
WHERE DEPARTMENTID=(SELECT DEPARTMENTID 
FROM DEPARTMENT 
WHERE DEPARTMENTNAME='COMPUTER SCIENCE');

--Display all students who belong to the "Electronics" department.

SELECT NAME FROM STUDENTS
WHERE DEPARTMENTID=(SELECT DEPARTMENTID 
FROM DEPARTMENT 
WHERE DEPARTMENTNAME='ELECTRONICS');

--Display students whose age is between 18 and 22.

SELECT * FROM STUDENTS 
WHERE AGE BETWEEN 18 AND 22; 

--INNER JOIN Students with Departments (to show student names with their department names).

SELECT S.NAME,D.DEPARTMENTNAME 
FROM STUDENTS AS S INNER JOIN DEPARTMENT AS D 
ON S.DEPARTMENTID=D.DEPARTMENTID;

--LEFT JOIN Courses with Departments (to show all courses, even if some department does not exist).

SELECT C.COURSENAME,D.DEPARTMENTNAME 
FROM COURSE AS C LEFT JOIN DEPARTMENT AS D 
ON C.DEPARTMENTID=D.DEPARTMENTID;

--RIGHT JOIN Students with Courses (to show all courses, even if no student has enrolled in them)

SELECT S.NAME,S.STUDENTID,C.COURSENAME,C.COURSEID
FROM STUDENTS AS S  RIGHT JOIN COURSE AS C 
ON S.DEPARTMENTID=C.DEPARTMENTID;

